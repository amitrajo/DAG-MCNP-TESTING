#! /usr/bin/env python
# encoding: utf-8

top = '.'
out = 'results'

import os.path, sys

sys.path.append('..')
from dagmctesting import *


def setup_testcases( self ):
    self.allcases = [ 'squares', 'metroid' ]


DagmcTestContext.setup_testcases = setup_testcases

def get_case_definition( self, casename ):
    case = DagmcTestContext.CaseDefn()
    case.name = casename
    case.runname = 'test_'.format(casename)


    def output_template( t ):
        return 'cases/{1}/ref.dag.{0}'.format(t, casename)

    def mesh_tally_output( t ):
        return 'cases/{1}/results/{0}'.format(t,casename)

    # Defaults for all cases
    case.inputs['inp'] = 'cases/{0}/{0}.inp'.format(casename)
    
    if self.options.facet_inputs: 
        case.inputs['gcad'] = 'cases/{0}/{0}.h5m'.format( casename )
    else:
        case.inputs['gcad'] = 'cases/{0}/{0}.sat'.format( casename )

    # case.outputs['o'] = output_template( 'out' ) 
    if casename == 'squares':
        meshes = [ 'cases/squares/{0}'.format( x ) for x in ['cylinder.h5m','twospheres.h5m'] ]
        for m in meshes:
            case.inputs['EXTRA'+os.path.basename(m)] = m
        case.outputs['meshtal34.vtk'] = mesh_tally_output( 'meshtal34.vtk' ) 
        case.outputs['meshtal44.vtk'] = mesh_tally_output( 'meshtal44.vtk' ) 
        case.outputs['meshtal54.vtk'] = mesh_tally_output( 'meshtal54.vtk' ) 
        case.outputs['o'] = 'cases/squares/ref_outp'

    return case

DagmcTestContext.get_case_definition = get_case_definition

